<?php


namespace Leafo\ScssPhp\Base;class Range{ public $first; public $last; public function __construct($first,$last){$this->first=$first;$this->last=$last;} public function includes($value){return $value>=$this->first&&$value<=$this->last;}}?><?php


namespace Leafo\ScssPhp;use Leafo\ScssPhp\Base\Range;use Leafo\ScssPhp\Colors;use Leafo\ScssPhp\Parser;use Leafo\ScssPhp\Util;class Compiler{const LINE_COMMENTS=1;const DEBUG_INFO=2;const WITH_RULE=1;const WITH_MEDIA=2;const WITH_SUPPORTS=4;const WITH_ALL=7;static protected $operatorNames=array('+'=>'add','-'=>'sub','*'=>'mul','/'=>'div','%'=>'mod','=='=>'eq','!='=>'neq','<'=>'lt','>'=>'gt','<='=>'lte','>='=>'gte',);static protected $namespaces=array('special'=>'%','mixin'=>'@','function'=>'^',);static protected $unitTable=array('in'=>array('in'=>1,'pt'=>72,'pc'=>6,'cm'=>2.54,'mm'=>25.4,'px'=>96,'q'=>101.6,),);static public $true=array('keyword','true');static public $false=array('keyword','false');static public $null=array('null');static public $defaultValue=array('keyword','');static public $selfSelector=array('self');static public $emptyList=array('list','',array());static public $emptyMap=array('map',array(),array());static public $emptyString=array('string','"',array());static public $with=array('keyword','with');static public $without=array('keyword','without'); protected $importPaths=array(''); protected $importCache=array(); protected $userFunctions=array(); protected $registeredVars=array(); protected $registeredFeatures=array('extend-selector-pseudoclass'=>false,'at-error'=>true,'units-level-3'=>false,'global-variable-shadowing'=>false,); protected $numberPrecision=5; protected $lineNumberStyle=null; protected $formatter='Leafo\ScssPhp\Formatter\Crunched'; protected $rootEnv; protected $rootBlock; private $indentLevel; private $commentsSeen; private $extends; private $extendsMap; private $parsedFiles; private $env; private $scope; private $parser; private $sourcePos; private $sourceParsers; private $sourceIndex; private $storeEnv; private $charsetSeen; private $stderr; private $shouldEvaluate; public function compile($code,$path=null){$locale=setlocale(LC_NUMERIC,0);setlocale(LC_NUMERIC,'C');$this->indentLevel=-1;$this->commentsSeen=array();$this->extends=array();$this->extendsMap=array();$this->parsedFiles=array();$this->sourceParsers=array();$this->sourceIndex=null;$this->env=null;$this->scope=null;$this->storeEnv=null;$this->stderr=fopen('php://stderr','w');$this->parser=$this->parserFactory($path);$tree=$this->parser->parse($code);$this->formatter=new $this->formatter();$this->rootEnv=$this->pushEnv($tree);$this->injectVariables($this->registeredVars);$this->compileRoot($tree);$this->popEnv();$out=$this->formatter->format($this->scope);setlocale(LC_NUMERIC,$locale);return $out;} private function parserFactory($path){$parser=new Parser($path,count($this->sourceParsers));$this->sourceParsers[]=$parser;$this->addParsedFile($path);return $parser;} protected function isSelfExtend($target,$origin){foreach($origin as $sel){if(in_array($target,$sel)){return true;}}return false;} protected function pushExtends($target,$origin){if($this->isSelfExtend($target,$origin)){return;}$i=count($this->extends);$this->extends[]=array($target,$origin);foreach($target as $part){if(isset($this->extendsMap[$part])){$this->extendsMap[$part][]=$i;}else {$this->extendsMap[$part]=array($i);}}} protected function makeOutputBlock($type,$selectors=null){$out=new \stdClass;$out->type=$type;$out->lines=array();$out->children=array();$out->parent=$this->scope;$out->selectors=$selectors;$out->depth=$this->env->depth;return $out;} protected function compileRoot($rootBlock){$this->rootBlock=$this->scope=$this->makeOutputBlock('root');$this->compileChildrenNoReturn($rootBlock->children,$this->scope);$this->flattenSelectors($this->scope);} protected function flattenSelectors($block,$parentKey=null){if($block->selectors){$selectors=array();foreach($block->selectors as $s){$selectors[]=$s;if(!is_array($s)){continue;}if(!empty($this->extendsMap)){$this->matchExtends($s,$selectors);array_walk($selectors,function (&$value){$value=json_encode($value);});$selectors=array_unique($selectors);array_walk($selectors,function (&$value){$value=json_decode($value);});}}$block->selectors=array();$placeholderSelector=false;foreach($selectors as $selector){if($this->hasSelectorPlaceholder($selector)){$placeholderSelector=true;continue;}$block->selectors[]=$this->compileSelector($selector);}if($placeholderSelector&&0===count($block->selectors)&&null!==$parentKey){unset($block->parent->children[$parentKey]);return;}}foreach($block->children as $key=>$child){$this->flattenSelectors($child,$key);}} protected function matchExtends($selector,&$out,$from=0,$initial=true){foreach($selector as $i=>$part){if($i<$from){continue;}if($this->matchExtendsSingle($part,$origin)){$before=array_slice($selector,0,$i);$after=array_slice($selector,$i+1);$s=count($before);foreach($origin as $new){$k=0;if($initial){while($k<$s&&isset($new[$k])&&$before[$k]===$new[$k]){$k++;}}$result=array_merge($before,$k>0?array_slice($new,$k):$new,$after);if($result===$selector){continue;}$out[]=$result;$this->matchExtends($result,$out,$i,false);if(!empty($before)&&count($new)>1){$result2=array_merge(array_slice($new,0,-1),$k>0?array_slice($before,$k):$before,array_slice($new,-1),$after);$out[]=$result2;}}}}} protected function matchExtendsSingle($rawSingle,&$outOrigin){$counts=array();$single=array();foreach($rawSingle as $part){if(!is_string($part)){return false;}if(!preg_match('/^[\[.:#%]/',$part)&&count($single)){$single[count($single)-1].=$part;}else {$single[]=$part;}}foreach($single as $part){if(isset($this->extendsMap[$part])){foreach($this->extendsMap[$part] as $idx){$counts[$idx]=isset($counts[$idx])?$counts[$idx]+1:1;}}}$outOrigin=array();$found=false;foreach($counts as $idx=>$count){list($target,$origin)=$this->extends[$idx];if($count!==count($target)){continue;}$rem=array_diff($single,$target);foreach($origin as $j=>$new){if($this->isSelfExtend($single,$origin)){return false;}$origin[$j][count($origin[$j])-1]=$this->combineSelectorSingle(end($new),$rem);}$outOrigin=array_merge($outOrigin,$origin);$found=true;}return $found;} protected function combineSelectorSingle($base,$other){$tag=null;$out=array();foreach(array($base,$other) as $single){foreach($single as $part){if(preg_match('/^[^\[.#:]/',$part)){$tag=$part;}else {$out[]=$part;}}}if($tag){array_unshift($out,$tag);}return $out;} protected function compileMedia($media){$this->pushEnv($media);$mediaQuery=$this->compileMediaQuery($this->multiplyMedia($this->env));if(!empty($mediaQuery)){$this->scope=$this->makeOutputBlock('media',array($mediaQuery));$parentScope=$this->mediaParent($this->scope);$parentScope->children[]=$this->scope;$needsWrap=false;foreach($media->children as $child){$type=$child[0];if($type!=='block'&&$type!=='media'&&$type!=='directive'&&$type!=='import'){$needsWrap=true;break;}}if($needsWrap){$wrapped=(object)array('selectors'=>array(),'children'=>$media->children,);$media->children=array(array('block',$wrapped));}$this->compileChildrenNoReturn($media->children,$this->scope);$this->scope=$this->scope->parent;}$this->popEnv();} protected function mediaParent($scope){while(!empty($scope->parent)){if(!empty($scope->type)&&$scope->type!=='media'){break;}$scope=$scope->parent;}return $scope;} protected function compileDirective($block){$s='@'.$block->name;if(!empty($block->value)){$s.=' '.$this->compileValue($block->value);}if($block->name==='keyframes'||substr($block->name,-10)==='-keyframes'){$this->compileKeyframeBlock($block,array($s));}else {$this->compileNestedBlock($block,array($s));}} protected function compileAtRoot($block){$env=$this->pushEnv($block);$envs=$this->compactEnv($env);$without=isset($block->with)?$this->compileWith($block->with):self::WITH_RULE;if($block->selector){$wrapped=(object)array('parent'=>$block,'sourcePosition'=>$block->sourcePosition,'sourceIndex'=>$block->sourceIndex,'selectors'=>$block->selector,'comments'=>array(),'children'=>$block->children,);$block->children=array(array('block',$wrapped));}$this->env=$this->filterWithout($envs,$without);$newBlock=$this->spliceTree($envs,$block,$without);$saveScope=$this->scope;$this->scope=$this->rootBlock;$this->compileChild($newBlock,$this->scope);$this->scope=$saveScope;$this->env=$this->extractEnv($envs);$this->popEnv();} private function spliceTree($envs,$block,$without){$newBlock=null;foreach($envs as $e){if(!isset($e->block)){continue;}if(isset($e->block)&&$e->block===$block){continue;}if(isset($e->block->type)&&$e->block->type==='at-root'){continue;}if(($without&self::WITH_RULE)&&isset($e->block->selectors)){continue;}if(($without&self::WITH_MEDIA)&&isset($e->block->type)&&$e->block->type==='media'){continue;}if(($without&self::WITH_SUPPORTS)&&isset($e->block->type)&&$e->block->type==='directive'&&isset($e->block->name)&&$e->block->name==='supports'){continue;}$b=new \stdClass;if(isset($e->block->sourcePosition)){$b->sourcePosition=$e->block->sourcePosition;}if(isset($e->block->sourceIndex)){$b->sourceIndex=$e->block->sourceIndex;}$b->selectors=array();if(isset($e->block->comments)){$b->comments=$e->block->comments;}if(isset($e->block->type)){$b->type=$e->block->type;}if(isset($e->block->name)){$b->name=$e->block->name;}if(isset($e->block->queryList)){$b->queryList=$e->block->queryList;}if(isset($e->block->value)){$b->value=$e->block->value;}if($newBlock){$type=isset($newBlock->type)?$newBlock->type:'block';$b->children=array(array($type,$newBlock));$newBlock->parent=$b;}elseif(count($block->children)){foreach($block->children as $child){if($child[0]==='block'){$child[1]->parent=$b;}}$b->children=$block->children;}$b->parent=null;$newBlock=$b;}$type=isset($newBlock->type)?$newBlock->type:'block';return array($type,$newBlock);} private function compileWith($with){static $mapping=array('rule'=>self::WITH_RULE,'media'=>self::WITH_MEDIA,'supports'=>self::WITH_SUPPORTS,'all'=>self::WITH_ALL,);$without=self::WITH_RULE;if($this->libMapHasKey(array($with,self::$with))){$without=self::WITH_ALL;$list=$this->coerceList($this->libMapGet(array($with,self::$with)));foreach($list[2] as $item){$keyword=$this->compileStringContent($this->coerceString($item));if(array_key_exists($keyword,$mapping)){$without&=~($mapping[$keyword]);}}}if($this->libMapHasKey(array($with,self::$without))){$without=0;$list=$this->coerceList($this->libMapGet(array($with,self::$without)));foreach($list[2] as $item){$keyword=$this->compileStringContent($this->coerceString($item));if(array_key_exists($keyword,$mapping)){$without|=$mapping[$keyword];}}}return $without;} private function filterWithout($envs,$without){$filtered=array();foreach($envs as $e){if(($without&self::WITH_RULE)&&isset($e->block->selectors)){continue;}if(($without&self::WITH_MEDIA)&&isset($e->block->type)&&$e->block->type==='media'){continue;}if(($without&self::WITH_SUPPORTS)&&isset($e->block->type)&&$e->block->type==='directive'&&isset($e->block->name)&&$e->block->name==='supports'){continue;}$filtered[]=$e;}return $this->extractEnv($filtered);} protected function compileKeyframeBlock($block,$selectors){$env=$this->pushEnv($block);$envs=$this->compactEnv($env);$this->env=$this->extractEnv(array_filter($envs,function ($e){return !isset($e->block->selectors);}));$this->scope=$this->makeOutputBlock($block->type,$selectors);$this->scope->depth=1;$this->scope->parent->children[]=$this->scope;$this->compileChildrenNoReturn($block->children,$this->scope);$this->scope=$this->scope->parent;$this->env=$this->extractEnv($envs);$this->popEnv();} protected function compileNestedBlock($block,$selectors){$this->pushEnv($block);$this->scope=$this->makeOutputBlock($block->type,$selectors);$this->scope->parent->children[]=$this->scope;$this->compileChildrenNoReturn($block->children,$this->scope);$this->scope=$this->scope->parent;$this->popEnv();} protected function compileBlock($block){$env=$this->pushEnv($block);$env->selectors=$this->evalSelectors($block->selectors);$out=$this->makeOutputBlock(null);if(isset($this->lineNumberStyle)&&count($env->selectors)&&count($block->children)){$annotation=$this->makeOutputBlock('comment');$annotation->depth=0;$parser=$this->sourceParsers[$block->sourceIndex];$file=$parser->getSourceName();$line=$parser->getLineNo($block->sourcePosition);switch($this->lineNumberStyle){case self::LINE_COMMENTS:$annotation->lines[]='/* line '.$line.', '.$file.' */';break;case self::DEBUG_INFO:$annotation->lines[]='@media -sass-debug-info{filename{font-family:"'.$file.'"}line{font-family:'.$line.'}}';break;}$this->scope->children[]=$annotation;}$this->scope->children[]=$out;if(count($block->children)){$out->selectors=$this->multiplySelectors($env);$this->compileChildrenNoReturn($block->children,$out);}$this->formatter->stripSemicolon($out->lines);$this->popEnv();} protected function compileComment($block){$out=$this->makeOutputBlock('comment');$out->lines[]=$block[1];$this->scope->children[]=$out;} protected function evalSelectors($selectors){$this->shouldEvaluate=false;$selectors=array_map(array($this,'evalSelector'),$selectors);if($this->shouldEvaluate){$buffer=$this->collapseSelectors($selectors);$parser=$this->parserFactory(__METHOD__);if($parser->parseSelector($buffer,$newSelectors)){$selectors=array_map(array($this,'evalSelector'),$newSelectors);}}return $selectors;} protected function evalSelector($selector){return array_map(array($this,'evalSelectorPart'),$selector);} protected function evalSelectorPart($part){foreach($part as &$p){if(is_array($p)&&($p[0]==='interpolate'||$p[0]==='string')){$p=$this->compileValue($p);if(strpos($p,'&')!==false||strpos($p,',')!==false){$this->shouldEvaluate=true;}}elseif(is_string($p)&&strlen($p)>=2&&($first=$p[0])&&($first==='"'||$first==="'")&&substr($p,-1)===$first){$p=substr($p,1,-1);}}return $this->flattenSelectorSingle($part);} protected function collapseSelectors($selectors){$parts=array();foreach($selectors as $selector){$output='';array_walk_recursive($selector,function ($value,$key)use (&$output){$output.=$value;});$parts[]=$output;}return implode(', ',$parts);} protected function flattenSelectorSingle($single){$joined=array();foreach($single as $part){if(empty($joined)||!is_string($part)||preg_match('/[\[.:#%]/',$part)){$joined[]=$part;continue;}if(is_array(end($joined))){$joined[]=$part;}else {$joined[count($joined)-1].=$part;}}return $joined;} protected function compileSelector($selector){if(!is_array($selector)){return $selector;}return implode(' ',array_map(array($this,'compileSelectorPart'),$selector));} protected function compileSelectorPart($piece){foreach($piece as &$p){if(!is_array($p)){continue;}switch($p[0]){case 'self':$p='&';break;default:$p=$this->compileValue($p);break;}}return implode($piece);} protected function hasSelectorPlaceholder($selector){if(!is_array($selector)){return false;}foreach($selector as $parts){foreach($parts as $part){if('%'===$part[0]){return true;}}}return false;} protected function compileChildren($stms,$out){foreach($stms as $stm){$ret=$this->compileChild($stm,$out);if(isset($ret)){return $ret;}}} protected function compileChildrenNoReturn($stms,$out){foreach($stms as $stm){$ret=$this->compileChild($stm,$out);if(isset($ret)){$this->throwError('@return may only be used within a function');}}} protected function compileMediaQuery($queryList){$out='@media';$first=true;foreach($queryList as $query){$type=null;$parts=array();foreach($query as $q){switch($q[0]){case 'mediaType':if($type){$type=$this->mergeMediaTypes($type,array_map(array($this,'compileValue'),array_slice($q,1)));if(empty($type)){return null;}}else {$type=array_map(array($this,'compileValue'),array_slice($q,1));}break;case 'mediaExp':if(isset($q[2])){$parts[]='('.$this->compileValue($q[1]).$this->formatter->assignSeparator.$this->compileValue($q[2]).')';}else {$parts[]='('.$this->compileValue($q[1]).')';}break;case 'mediaValue':$parts[]=$this->compileValue($q[1]);break;}}if($type){array_unshift($parts,implode(' ',array_filter($type)));}if(!empty($parts)){if($first){$first=false;$out.=' ';}else {$out.=$this->formatter->tagSeparator;}$out.=implode(' and ',$parts);}}return $out;} protected function mergeMediaTypes($type1,$type2){if(empty($type1)){return $type2;}if(empty($type2)){return $type1;}$m1='';$t1='';if(count($type1)>1){$m1=strtolower($type1[0]);$t1=strtolower($type1[1]);}else {$t1=strtolower($type1[0]);}$m2='';$t2='';if(count($type2)>1){$m2=strtolower($type2[0]);$t2=strtolower($type2[1]);}else {$t2=strtolower($type2[0]);}if(($m1==='not')^($m2==='not')){if($t1===$t2){return null;}return array($m1==='not'?$m2:$m1,$m1==='not'?$t2:$t1,);}if($m1==='not'&&$m2==='not'){if($t1!==$t2){return null;}return array('not',$t1);}if($t1!==$t2){return null;}return array(empty($m1)?$m2:$m1,$t1);} protected function compileImport($rawPath,$out){if($rawPath[0]==='string'){$path=$this->compileStringContent($rawPath);if($path=$this->findImport($path)){$this->importFile($path,$out);return true;}return false;}if($rawPath[0]==='list'){if(count($rawPath[2])===0){return false;}foreach($rawPath[2] as $path){if($path[0]!=='string'){return false;}}foreach($rawPath[2] as $path){$this->compileImport($path,$out);}return true;}return false;} protected function compileChild($child,$out){$this->sourceIndex=isset($child[Parser::SOURCE_INDEX])?$child[Parser::SOURCE_INDEX]:null;$this->sourcePos=isset($child[Parser::SOURCE_POSITION])?$child[Parser::SOURCE_POSITION]:-1;switch($child[0]){case 'import':list(,$rawPath)=$child;$rawPath=$this->reduce($rawPath);if(!$this->compileImport($rawPath,$out)){$out->lines[]='@import '.$this->compileValue($rawPath).';';}break;case 'directive':$this->compileDirective($child[1]);break;case 'at-root':$this->compileAtRoot($child[1]);break;case 'media':$this->compileMedia($child[1]);break;case 'block':$this->compileBlock($child[1]);break;case 'charset':if(!$this->charsetSeen){$this->charsetSeen=true;$out->lines[]='@charset '.$this->compileValue($child[1]).';';}break;case 'assign':list(,$name,$value)=$child;if($name[0]==='var'){$flag=isset($child[3])?$child[3]:null;$isDefault=$flag==='!default';$isGlobal=$flag==='!global';if($isGlobal){$this->set($name[1],$this->reduce($value),false,$this->rootEnv);break;}$shouldSet=$isDefault&&(($result=$this->get($name[1],false))===null||$result===self::$null);if(!$isDefault||$shouldSet){$this->set($name[1],$this->reduce($value));}break;}$compiledName=$this->compileValue($name);if($compiledName==='font'){if($value[0]==='exp'&&$value[1]==='/'){$value=$this->expToString($value);}elseif($value[0]==='list'){foreach($value[2] as &$item){if($item[0]==='exp'&&$item[1]==='/'){$item=$this->expToString($item);}}}}if($value[0]!=='null'){$value=$this->reduce($value);if($value[0]==='null'){break;}}$compiledValue=$this->compileValue($value);$out->lines[]=$this->formatter->property($compiledName,$compiledValue);break;case 'comment':if($out->type==='root'){$this->compileComment($child);break;}$out->lines[]=$child[1];break;case 'mixin':case 'function':list(,$block)=$child;$this->set(self::$namespaces[$block->type].$block->name,$block);break;case 'extend':list(,$selectors)=$child;foreach($selectors as $sel){$results=$this->evalSelectors(array($sel));foreach($results as $result){$result=current($result);$this->pushExtends($result,$out->selectors);}}break;case 'if':list(,$if)=$child;if($this->isTruthy($this->reduce($if->cond,true))){return $this->compileChildren($if->children,$out);}foreach($if->cases as $case){if($case->type==='else'||$case->type==='elseif'&&$this->isTruthy($this->reduce($case->cond))){return $this->compileChildren($case->children,$out);}}break;case 'return':return $this->reduce($child[1],true);case 'each':list(,$each)=$child;$list=$this->coerceList($this->reduce($each->list));$this->pushEnv();foreach($list[2] as $item){if(count($each->vars)===1){$this->set($each->vars[0],$item,true);}else {list(,,$values)=$this->coerceList($item);foreach($each->vars as $i=>$var){$this->set($var,isset($values[$i])?$values[$i]:self::$null,true);}}$ret=$this->compileChildren($each->children,$out);if($ret){$this->popEnv();return $ret;}}$this->popEnv();break;case 'while':list(,$while)=$child;while($this->isTruthy($this->reduce($while->cond,true))){$ret=$this->compileChildren($while->children,$out);if($ret){return $ret;}}break;case 'for':list(,$for)=$child;$start=$this->reduce($for->start,true);$start=$start[1];$end=$this->reduce($for->end,true);$end=$end[1];$d=$start<$end?1:-1;while(true){if((!$for->until&&$start-$d==$end)||($for->until&&$start==$end)){break;}$this->set($for->var,array('number',$start,''));$start+=$d;$ret=$this->compileChildren($for->children,$out);if($ret){return $ret;}}break;case 'nestedprop':list(,$prop)=$child;$prefixed=array();$prefix=$this->compileValue($prop->prefix).'-';foreach($prop->children as $child){if($child[0]==='assign'){array_unshift($child[1][2],$prefix);}if($child[0]==='nestedprop'){array_unshift($child[1]->prefix[2],$prefix);}$prefixed[]=$child;}$this->compileChildrenNoReturn($prefixed,$out);break;case 'include':list(,$name,$argValues,$content)=$child;$mixin=$this->get(self::$namespaces['mixin'].$name,false);if(!$mixin){$this->throwError("Undefined mixin $name");}$callingScope=$this->getStoreEnv();$this->pushEnv();$this->env->depth--;if(isset($content)){$content->scope=$callingScope;$this->setRaw(self::$namespaces['special'].'content',$content,$this->getStoreEnv());}if(isset($mixin->args)){$this->applyArguments($mixin->args,$argValues);}$this->env->marker='mixin';$this->compileChildrenNoReturn($mixin->children,$out);$this->popEnv();break;case 'mixin_content':$content=$this->get(self::$namespaces['special'].'content',false,$this->getStoreEnv());if(!$content){$this->throwError('Expected @content inside of mixin');}if(!isset($content->children)){break;}$storeEnv=$this->storeEnv;$this->storeEnv=$content->scope;$this->compileChildrenNoReturn($content->children,$out);$this->storeEnv=$storeEnv;break;case 'debug':list(,$value)=$child;$line=$this->parser->getLineNo($this->sourcePos);$value=$this->compileValue($this->reduce($value,true));fwrite($this->stderr,"Line $line DEBUG: $value\n");break;case 'warn':list(,$value)=$child;$line=$this->parser->getLineNo($this->sourcePos);$value=$this->compileValue($this->reduce($value,true));echo "Line $line WARN: $value\n";break;case 'error':list(,$value)=$child;$line=$this->parser->getLineNo($this->sourcePos);$value=$this->compileValue($this->reduce($value,true));$this->throwError("Line $line ERROR: $value\n");break;default:$this->throwError("unknown child type: $child[0]");}} protected function expToString($exp){list(,$op,$left,$right,$inParens,$whiteLeft,$whiteRight)=$exp;$content=array($this->reduce($left));if($whiteLeft){$content[]=' ';}$content[]=$op;if($whiteRight){$content[]=' ';}$content[]=$this->reduce($right);return array('string','',$content);} protected function isTruthy($value){return $value!==self::$false&&$value!==self::$null;} protected function shouldEval($value){switch($value[0]){case 'exp':if($value[1]==='/'){return $this->shouldEval($value[2],$value[3]);}case 'var':case 'fncall':return true;}return false;} protected function reduce($value,$inExp=false){list($type)=$value;switch($type){case 'exp':list(,$op,$left,$right,$inParens)=$value;$opName=isset(self::$operatorNames[$op])?self::$operatorNames[$op]:$op;$inExp=$inExp||$this->shouldEval($left)||$this->shouldEval($right);$left=$this->reduce($left,true);if($op!=='and'&&$op!=='or'){$right=$this->reduce($right,true);}if($opName==='div'&&!$inParens&&!$inExp&&isset($right[2])&&$right[2]!==''){return $this->expToString($value);}$left=$this->coerceForExpression($left);$right=$this->coerceForExpression($right);$ltype=$left[0];$rtype=$right[0];$ucOpName=ucfirst($opName);$ucLType=ucfirst($ltype);$ucRType=ucfirst($rtype);$fn="op${ucOpName}${ucLType}${ucRType}";if(is_callable(array($this,$fn))||(($fn="op${ucLType}${ucRType}")&&is_callable(array($this,$fn))&&$passOp=true)||(($fn="op${ucOpName}")&&is_callable(array($this,$fn))&&$genOp=true)){$unitChange=false;if(!isset($genOp)&&$left[0]==='number'&&$right[0]==='number'){if($opName==='mod'&&$right[2]!==''){$this->throwError("Cannot modulo by a number with units: $right[1]$right[2].");}$unitChange=true;$emptyUnit=$left[2]===''||$right[2]==='';$targetUnit=''!==$left[2]?$left[2]:$right[2];if($opName!=='mul'){$left[2]=''!==$left[2]?$left[2]:$targetUnit;$right[2]=''!==$right[2]?$right[2]:$targetUnit;}if($opName!=='mod'){$left=$this->normalizeNumber($left);$right=$this->normalizeNumber($right);}if($opName==='div'&&!$emptyUnit&&$left[2]===$right[2]){$targetUnit='';}if($opName==='mul'){$left[2]=''!==$left[2]?$left[2]:$right[2];$right[2]=''!==$right[2]?$right[2]:$left[2];}elseif($opName==='div'&&$left[2]===$right[2]){$left[2]='';$right[2]='';}}$shouldEval=$inParens||$inExp;if(isset($passOp)){$out=$this->$fn($op,$left,$right,$shouldEval);}else {$out=$this->$fn($left,$right,$shouldEval);}if(isset($out)){if($unitChange&&$out[0]==='number'){$out=$this->coerceUnit($out,$targetUnit);}return $out;}}return $this->expToString($value);case 'unary':list(,$op,$exp,$inParens)=$value;$inExp=$inExp||$this->shouldEval($exp);$exp=$this->reduce($exp);if($exp[0]==='number'){switch($op){case '+':return $exp;case '-':$exp[1]*=-1;return $exp;}}if($op==='not'){if($inExp||$inParens){if($exp===self::$false){return self::$true;}return self::$false;}$op=$op.' ';}return array('string','',array($op,$exp));case 'var':list(,$name)=$value;return $this->reduce($this->get($name));case 'list':foreach($value[2] as &$item){$item=$this->reduce($item);}return $value;case 'map':foreach($value[1] as &$item){$item=$this->reduce($item);}foreach($value[2] as &$item){$item=$this->reduce($item);}return $value;case 'string':foreach($value[2] as &$item){if(is_array($item)){$item=$this->reduce($item);}}return $value;case 'interpolate':$value[1]=$this->reduce($value[1]);return $value;case 'fncall':list(,$name,$argValues)=$value;$func=$this->get(self::$namespaces['function'].$name,false);if($func){$this->pushEnv();if(isset($func->args)){$this->applyArguments($func->args,$argValues);}$tmp=(object)array('lines'=>array(),'children'=>array(),);$this->env->marker='function';$ret=$this->compileChildren($func->children,$tmp);$this->popEnv();return !isset($ret)?self::$defaultValue:$ret;}if($this->callBuiltin($name,$argValues,$returnValue)){return $returnValue;}$listArgs=array();foreach((array)$argValues as $arg){if(empty($arg[0])){$listArgs[]=$this->reduce($arg[1]);}}return array('function',$name,array('list',',',$listArgs));default:return $value;}} protected function normalizeName($name){return str_replace('-','_',$name);} public function normalizeValue($value){$value=$this->coerceForExpression($this->reduce($value));list($type)=$value;switch($type){case 'list':$value=$this->extractInterpolation($value);if($value[0]!=='list'){return array('keyword',$this->compileValue($value));}foreach($value[2] as $key=>$item){$value[2][$key]=$this->normalizeValue($item);}return $value;case 'string':return array($type,'"',array($this->compileStringContent($value)));case 'number':return $this->normalizeNumber($value);case 'interpolate':return array('keyword',$this->compileValue($value));default:return $value;}} protected function normalizeNumber($number){list(,$value,$unit)=$number;if(isset(self::$unitTable['in'][$unit])){$conv=self::$unitTable['in'][$unit];return array('number',$value/$conv,'in');}return $number;} protected function opAddNumberNumber($left,$right){return array('number',$left[1]+$right[1],$left[2]);} protected function opMulNumberNumber($left,$right){return array('number',$left[1]*$right[1],$left[2]);} protected function opSubNumberNumber($left,$right){return array('number',$left[1]-$right[1],$left[2]);} protected function opDivNumberNumber($left,$right){if($right[1]==0){return array('string','',array($left[1].$left[2].'/'.$right[1].$right[2]));}return array('number',$left[1]/$right[1],$left[2]);} protected function opModNumberNumber($left,$right){return array('number',$left[1]%$right[1],$left[2]);} protected function opAdd($left,$right){if($strLeft=$this->coerceString($left)){if($right[0]==='string'){$right[1]='';}$strLeft[2][]=$right;return $strLeft;}if($strRight=$this->coerceString($right)){if($left[0]==='string'){$left[1]='';}array_unshift($strRight[2],$left);return $strRight;}} protected function opAnd($left,$right,$shouldEval){if(!$shouldEval){return;}if($left!==self::$false){return $this->reduce($right,true);}return $left;} protected function opOr($left,$right,$shouldEval){if(!$shouldEval){return;}if($left!==self::$false){return $left;}return $this->reduce($right,true);} protected function opColorColor($op,$left,$right){$out=array('color');foreach(range(1,3) as $i){$lval=isset($left[$i])?$left[$i]:0;$rval=isset($right[$i])?$right[$i]:0;switch($op){case '+':$out[]=$lval+$rval;break;case '-':$out[]=$lval-$rval;break;case '*':$out[]=$lval*$rval;break;case '%':$out[]=$lval%$rval;break;case '/':if($rval==0){$this->throwError("color: Can't divide by zero");}$out[]=(int)($lval/$rval);break;case '==':return $this->opEq($left,$right);case '!=':return $this->opNeq($left,$right);default:$this->throwError("color: unknown op $op");}}if(isset($left[4])){$out[4]=$left[4];}elseif(isset($right[4])){$out[4]=$right[4];}return $this->fixColor($out);} protected function opColorNumber($op,$left,$right){$value=$right[1];return $this->opColorColor($op,$left,array('color',$value,$value,$value));} protected function opNumberColor($op,$left,$right){$value=$left[1];return $this->opColorColor($op,array('color',$value,$value,$value),$right);} protected function opEq($left,$right){if(($lStr=$this->coerceString($left))&&($rStr=$this->coerceString($right))){$lStr[1]='';$rStr[1]='';$left=$this->compileValue($lStr);$right=$this->compileValue($rStr);}return $this->toBool($left===$right);} protected function opNeq($left,$right){if(($lStr=$this->coerceString($left))&&($rStr=$this->coerceString($right))){$lStr[1]='';$rStr[1]='';$left=$this->compileValue($lStr);$right=$this->compileValue($rStr);}return $this->toBool($left!==$right);} protected function opGteNumberNumber($left,$right){return $this->toBool($left[1]>=$right[1]);} protected function opGtNumberNumber($left,$right){return $this->toBool($left[1]>$right[1]);} protected function opLteNumberNumber($left,$right){return $this->toBool($left[1]<=$right[1]);} protected function opLtNumberNumber($left,$right){return $this->toBool($left[1]<$right[1]);} public function toBool($thing){return $thing?self::$true:self::$false;} public function compileValue($value){$value=$this->reduce($value);list($type)=$value;switch($type){case 'keyword':return $value[1];case 'color':list(,$r,$g,$b)=$value;$r=round($r);$g=round($g);$b=round($b);if(count($value)===5&&$value[4]!==1){return 'rgba('.$r.', '.$g.', '.$b.', '.$value[4].')';}$h=sprintf('#%02x%02x%02x',$r,$g,$b);if($h[1]===$h[2]&&$h[3]===$h[4]&&$h[5]===$h[6]){$h='#'.$h[1].$h[3].$h[5];}return $h;case 'number':return round($value[1],$this->numberPrecision).$value[2];case 'string':return $value[1].$this->compileStringContent($value).$value[1];case 'function':$args=!empty($value[2])?$this->compileValue($value[2]):'';return "$value[1]($args)";case 'list':$value=$this->extractInterpolation($value);if($value[0]!=='list'){return $this->compileValue($value);}list(,$delim,$items)=$value;if($delim!==' '){$delim.=' ';}$filtered=array();foreach($items as $item){if($item[0]==='null'){continue;}$filtered[]=$this->compileValue($item);}return implode("$delim",$filtered);case 'map':$keys=$value[1];$values=$value[2];$filtered=array();for($i=0,$s=count($keys);$i<$s;$i++){$filtered[$this->compileValue($keys[$i])]=$this->compileValue($values[$i]);}array_walk($filtered,function (&$value,$key){$value=$key.': '.$value;});return '('.implode(', ',$filtered).')';case 'interpolated':list(,$interpolate,$left,$right)=$value;list(,,$whiteLeft,$whiteRight)=$interpolate;$left=count($left[2])>0?$this->compileValue($left).$whiteLeft:'';$right=count($right[2])>0?$whiteRight.$this->compileValue($right):'';return $left.$this->compileValue($interpolate).$right;case 'interpolate':list(,$exp)=$value;$reduced=$this->reduce($exp);switch($reduced[0]){case 'string':$reduced=array('keyword',$this->compileStringContent($reduced));break;case 'null':$reduced=array('keyword','');}return $this->compileValue($reduced);case 'null':return 'null';default:$this->throwError("unknown value type: $type");}} protected function flattenList($list){return $this->compileValue($list);} protected function compileStringContent($string){$parts=array();foreach($string[2] as $part){if(is_array($part)){$parts[]=$this->compileValue($part);}else {$parts[]=$part;}}return implode($parts);} protected function extractInterpolation($list){$items=$list[2];foreach($items as $i=>$item){if($item[0]==='interpolate'){$before=array('list',$list[1],array_slice($items,0,$i));$after=array('list',$list[1],array_slice($items,$i+1));return array('interpolated',$item,$before,$after);}}return $list;} protected function multiplySelectors($env){$envs=$this->compactEnv($env);$selectors=array();$parentSelectors=array(array());while($env=array_pop($envs)){if(empty($env->selectors)){continue;}$selectors=array();foreach($env->selectors as $selector){foreach($parentSelectors as $parent){$selectors[]=$this->joinSelectors($parent,$selector);}}$parentSelectors=$selectors;}return $selectors;} protected function joinSelectors($parent,$child){$setSelf=false;$out=array();foreach($child as $part){$newPart=array();foreach($part as $p){if($p===self::$selfSelector){$setSelf=true;foreach($parent as $i=>$parentPart){if($i>0){$out[]=$newPart;$newPart=array();}foreach($parentPart as $pp){$newPart[]=$pp;}}}else {$newPart[]=$p;}}$out[]=$newPart;}return $setSelf?$out:array_merge($parent,$child);} protected function multiplyMedia($env,$childQueries=null){if(!isset($env)||!empty($env->block->type)&&$env->block->type!=='media'){return $childQueries;}if(empty($env->block->type)){return $this->multiplyMedia($env->parent,$childQueries);}$parentQueries=isset($env->block->queryList)?$env->block->queryList:array(array(array('mediaValue',$env->block->value)));if($childQueries===null){$childQueries=$parentQueries;}else {$originalQueries=$childQueries;$childQueries=array();foreach($parentQueries as $parentQuery){foreach($originalQueries as $childQuery){$childQueries[]=array_merge($parentQuery,$childQuery);}}}return $this->multiplyMedia($env->parent,$childQueries);} private function compactEnv($env){for($envs=array();$env;$env=$env->parent){$envs[]=$env;}return $envs;} private function extractEnv($envs){for($env=null;$e=array_pop($envs);){$e->parent=$env;$env=$e;}return $env;} protected function pushEnv($block=null){$env=new \stdClass;$env->parent=$this->env;$env->store=array();$env->block=$block;$env->depth=isset($this->env->depth)?$this->env->depth+1:0;$this->env=$env;return $env;} protected function popEnv(){$this->env=$this->env->parent;} protected function getStoreEnv(){return isset($this->storeEnv)?$this->storeEnv:$this->env;} protected function set($name,$value,$shadow=false,$env=null){$name=$this->normalizeName($name);if(!isset($env)){$env=$this->getStoreEnv();}if($shadow){$this->setRaw($name,$value,$env);}else {$this->setExisting($name,$value,$env);}} protected function setExisting($name,$value,$env){$storeEnv=$env;$hasNamespace=$name[0]==='^'||$name[0]==='@'||$name[0]==='%';for(;;){if(array_key_exists($name,$env->store)){break;}if(!$hasNamespace&&isset($env->marker)){$env=$storeEnv;break;}if(!isset($env->parent)){$env=$storeEnv;break;}$env=$env->parent;}$env->store[$name]=$value;} protected function setRaw($name,$value,$env){$env->store[$name]=$value;} public function get($name,$shouldThrow=true,$env=null){$name=$this->normalizeName($name);if(!isset($env)){$env=$this->getStoreEnv();}$hasNamespace=$name[0]==='^'||$name[0]==='@'||$name[0]==='%';for(;;){if(array_key_exists($name,$env->store)){return $env->store[$name];}if(!$hasNamespace&&isset($env->marker)){$env=$this->rootEnv;continue;}if(!isset($env->parent)){break;}$env=$env->parent;}if($shouldThrow){$this->throwError("Undefined variable \$$name");}} protected function has($name,$env=null){return $this->get($name,false,$env)!==null;} protected function injectVariables(array$args){if(empty($args)){return;}$parser=$this->parserFactory(__METHOD__);foreach($args as $name=>$strValue){if($name[0]==='$'){$name=substr($name,1);}if(!$parser->parseValue($strValue,$value)){$value=$this->coerceValue($strValue);}$this->set($name,$value);}} public function setVariables(array$variables){$this->registeredVars=array_merge($this->registeredVars,$variables);} public function unsetVariable($name){unset($this->registeredVars[$name]);} public function getVariables(){return $this->registeredVars;} public function addParsedFile($path){if(isset($path)&&file_exists($path)){$this->parsedFiles[realpath($path)]=filemtime($path);}} public function getParsedFiles(){return $this->parsedFiles;} public function addImportPath($path){if(!in_array($path,$this->importPaths)){$this->importPaths[]=$path;}} public function setImportPaths($path){$this->importPaths=(array)$path;} public function setNumberPrecision($numberPrecision){$this->numberPrecision=$numberPrecision;} public function setFormatter($formatterName){$this->formatter=$formatterName;} public function setLineNumberStyle($lineNumberStyle){$this->lineNumberStyle=$lineNumberStyle;} public function registerFunction($name,$func){$this->userFunctions[$this->normalizeName($name)]=$func;} public function unregisterFunction($name){unset($this->userFunctions[$this->normalizeName($name)]);} public function addFeature($name){$this->registeredFeatures[$name]=true;} protected function importFile($path,$out){$realPath=realpath($path);if(isset($this->importCache[$realPath])){$this->handleImportLoop($realPath);$tree=$this->importCache[$realPath];}else {$code=file_get_contents($path);$parser=$this->parserFactory($path);$tree=$parser->parse($code);$this->importCache[$realPath]=$tree;}$pi=pathinfo($path);array_unshift($this->importPaths,$pi['dirname']);$this->compileChildrenNoReturn($tree->children,$out);array_shift($this->importPaths);} public function findImport($url){$urls=array();if(!preg_match('/\.css$|^https?:\/\//',$url)){$urls=array($url,preg_replace('/[^\/]+$/','_\0',$url));}foreach($this->importPaths as $dir){if(is_string($dir)){foreach($urls as $full){$full=$dir.(!empty($dir)&&substr($dir,-1)!=='/'?'/':'').$full;if($this->fileExists($file=$full.'.scss')||$this->fileExists($file=$full)){return $file;}}}elseif(is_callable($dir)){$file=call_user_func($dir,$url,$this);if($file!==null){return $file;}}}return null;} public function throwError($msg){if(func_num_args()>1){$msg=call_user_func_array('sprintf',func_get_args());}if($this->sourcePos>=0&&isset($this->sourceIndex)){$parser=$this->sourceParsers[$this->sourceIndex];$parser->throwParseError($msg,$this->sourcePos);} throw new \Exception($msg);} private function handleImportLoop($name){for($env=$this->env;$env;$env=$env->parent){$parser=$this->sourceParsers[$env->block->sourceIndex];$file=$parser->getSourceName();if(realpath($file)===$name){$this->throwError('An @import loop has been found: %s imports %s',$file,basename($file));}}} protected function fileExists($name){return is_file($name);} protected function callBuiltin($name,$args,&$returnValue){$name=$this->normalizeName($name);if(isset($this->userFunctions[$name])){$fn=$this->userFunctions[$name];if($name!=='if'&&$name!=='call'){foreach($args as &$val){$val=$this->reduce($val[1],true);}}$returnValue=call_user_func($fn,$args,$this);}else {$f=$this->getBuiltinFunction($name);if(is_callable($f)){$libName=$f[1];$prototype=isset(self::$$libName)?self::$$libName:null;$sorted=$this->sortArgs($prototype,$args);if($name!=='if'&&$name!=='call'){foreach($sorted as &$val){$val=$this->reduce($val,true);}}$returnValue=call_user_func($f,$sorted,$this);}}if(isset($returnValue)){$returnValue=$this->coerceValue($returnValue);return true;}return false;} protected function getBuiltinFunction($name){$libName='lib'.preg_replace_callback('/_(.)/',function ($m){return ucfirst($m[1]);},ucfirst($name));return array($this,$libName);} protected function sortArgs($prototype,$args){$keyArgs=array();$posArgs=array();foreach($args as $arg){list($key,$value)=$arg;$key=$key[1];if(empty($key)){$posArgs[]=$value;}else {$keyArgs[$key]=$value;}}if(!isset($prototype)){return $posArgs;}$finalArgs=array();foreach($prototype as $i=>$names){if(isset($posArgs[$i])){$finalArgs[]=$posArgs[$i];continue;}$set=false;foreach((array)$names as $name){if(isset($keyArgs[$name])){$finalArgs[]=$keyArgs[$name];$set=true;break;}}if(!$set){$finalArgs[]=null;}}return $finalArgs;} protected function applyArguments($argDef,$argValues){$storeEnv=$this->getStoreEnv();$env=new \stdClass;$env->store=$storeEnv->store;$hasVariable=false;$args=array();foreach($argDef as $i=>$arg){list($name,$default,$isVariable)=$argDef[$i];$args[$name]=array($i,$name,$default,$isVariable);$hasVariable|=$isVariable;}$keywordArgs=array();$deferredKeywordArgs=array();$remaining=array();foreach((array)$argValues as $arg){if(!empty($arg[0])){if(!isset($args[$arg[0][1]])){if($hasVariable){$deferredKeywordArgs[$arg[0][1]]=$arg[1];}else {$this->throwError("Mixin or function doesn't have an argument named $%s.",$arg[0][1]);}}elseif($args[$arg[0][1]][0]<count($remaining)){$this->throwError("The argument $%s was passed both by position and by name.",$arg[0][1]);}else {$keywordArgs[$arg[0][1]]=$arg[1];}}elseif(count($keywordArgs)){$this->throwError('Positional arguments must come before keyword arguments.');}elseif($arg[2]===true){$val=$this->reduce($arg[1],true);if($val[0]==='list'){foreach($val[2] as $name=>$item){if(!is_numeric($name)){$keywordArgs[$name]=$item;}else {$remaining[]=$item;}}}elseif($val[0]==='map'){foreach($val[1] as $i=>$name){$name=$this->compileStringContent($this->coerceString($name));$item=$val[2][$i];if(!is_numeric($name)){$keywordArgs[$name]=$item;}else {$remaining[]=$item;}}}else {$remaining[]=$val;}}else {$remaining[]=$arg[1];}}foreach($args as $arg){list($i,$name,$default,$isVariable)=$arg;if($isVariable){$val=array('list',',',array(),$isVariable);for($count=count($remaining);$i<$count;$i++){$val[2][]=$remaining[$i];}foreach($deferredKeywordArgs as $itemName=>$item){$val[2][$itemName]=$item;}}elseif(isset($remaining[$i])){$val=$remaining[$i];}elseif(isset($keywordArgs[$name])){$val=$keywordArgs[$name];}elseif(!empty($default)){continue;}else {$this->throwError("Missing argument $name");}$this->set($name,$this->reduce($val,true),true,$env);}$storeEnv->store=$env->store;foreach($args as $arg){list($i,$name,$default,$isVariable)=$arg;if($isVariable||isset($remaining[$i])||isset($keywordArgs[$name])||empty($default)){continue;}$this->set($name,$this->reduce($default,true),true);}} private function coerceValue($value){if(is_array($value)){return $value;}if(is_bool($value)){return $value?self::$true:self::$false;}if($value===null){$value=self::$null;}if(is_numeric($value)){return array('number',$value,'');}if($value===''){return self::$emptyString;}return array('keyword',$value);} protected function coerceUnit($number,$unit){list(,$value,$baseUnit)=$number;if(isset(self::$unitTable[$baseUnit][$unit])){$value=$value*self::$unitTable[$baseUnit][$unit];}return array('number',$value,$unit);} protected function coerceMap($item){if($item[0]==='map'){return $item;}if($item===self::$emptyList){return self::$emptyMap;}return array('map',array($item),array(self::$null));} protected function coerceList($item,$delim=','){if(isset($item)&&$item[0]==='list'){return $item;}if(isset($item)&&$item[0]==='map'){$keys=$item[1];$values=$item[2];$list=array();for($i=0,$s=count($keys);$i<$s;$i++){$key=$keys[$i];$value=$values[$i];$list[]=array('list','',array(array('keyword',$this->compileStringContent($this->coerceString($key))),$value));}return array('list',',',$list);}return array('list',$delim,!isset($item)?array():array($item));} protected function coerceForExpression($value){if($color=$this->coerceColor($value)){return $color;}return $value;} protected function coerceColor($value){switch($value[0]){case 'color':return $value;case 'keyword':$name=strtolower($value[1]);if(isset(Colors::$cssColors[$name])){$rgba=explode(',',Colors::$cssColors[$name]);return isset($rgba[3])?array('color',(int)$rgba[0],(int)$rgba[1],(int)$rgba[2],(int)$rgba[3]):array('color',(int)$rgba[0],(int)$rgba[1],(int)$rgba[2]);}return null;}return null;} protected function coerceString($value){if($value[0]==='string'){return $value;}return array('string','',array($this->compileValue($value)));} protected function coercePercent($value){if($value[0]==='number'){if($value[2]==='%'){return $value[1]/100;}return $value[1];}return 0;} public function assertMap($value){$value=$this->coerceMap($value);if($value[0]!=='map'){$this->throwError('expecting map');}return $value;} public function assertList($value){if($value[0]!=='list'){$this->throwError('expecting list');}return $value;} public function assertColor($value){if($color=$this->coerceColor($value)){return $color;}$this->throwError('expecting color');} public function assertNumber($value){if($value[0]!=='number'){$this->throwError('expecting number');}return $value[1];} protected function fixColor($c){foreach(range(1,3) as $i){if($c[$i]<0){$c[$i]=0;}if($c[$i]>255){$c[$i]=255;}}return $c;} public function toHSL($red,$green,$blue){$min=min($red,$green,$blue);$max=max($red,$green,$blue);$l=$min+$max;$d=$max-$min;if((int)$d===0){$h=$s=0;}else {if($l<255){$s=$d/$l;}else {$s=$d/(510-$l);}if($red==$max){$h=60*($green-$blue)/$d;}elseif($green==$max){$h=60*($blue-$red)/$d+120;}elseif($blue==$max){$h=60*($red-$green)/$d+240;}}return array('hsl',fmod($h,360),$s*100,$l/5.1);} private function hueToRGB($m1,$m2,$h){if($h<0){$h+=1;}elseif($h>1){$h-=1;}if($h*6<1){return $m1+($m2-$m1)*$h*6;}if($h*2<1){return $m2;}if($h*3<2){return $m1+($m2-$m1)*(2/3-$h)*6;}return $m1;} public function toRGB($hue,$saturation,$lightness){if($hue<0){$hue+=360;}$h=$hue/360;$s=min(100,max(0,$saturation))/100;$l=min(100,max(0,$lightness))/100;$m2=$l<=0.5?$l*($s+1):$l+$s-$l*$s;$m1=$l*2-$m2;$r=$this->hueToRGB($m1,$m2,$h+1/3)*255;$g=$this->hueToRGB($m1,$m2,$h)*255;$b=$this->hueToRGB($m1,$m2,$h-1/3)*255;$out=array('color',$r,$g,$b);return $out;} protected function libCall($args){$name=$this->compileStringContent($this->coerceString($this->reduce(array_shift($args),true)));return $this->reduce(array('fncall',$name,array_map(function ($a){return array(null,$a);},$args)));} protected static $libIf=array('condition','if-true','if-false'); protected function libIf($args){list($cond,$t,$f)=$args;if(!$this->isTruthy($this->reduce($cond,true))){return $this->reduce($f,true);}return $this->reduce($t,true);} protected static $libIndex=array('list','value'); protected function libIndex($args){list($list,$value)=$args;if($value[0]==='map'){return self::$null;}if($list[0]==='map'||$list[0]==='string'||$list[0]==='keyword'||$list[0]==='interpolate'){$list=$this->coerceList($list,' ');}if($list[0]!=='list'){return self::$null;}$values=array();foreach($list[2] as $item){$values[]=$this->normalizeValue($item);}$key=array_search($this->normalizeValue($value),$values);return false===$key?self::$null:$key+1;} protected static $libRgb=array('red','green','blue'); protected function libRgb($args){list($r,$g,$b)=$args;return array('color',$r[1],$g[1],$b[1]);} protected static $libRgba=array(array('red','color'),'green','blue','alpha'); protected function libRgba($args){if($color=$this->coerceColor($args[0])){reset($args);$num=!isset($args[1])?$args[3]:$args[1];$alpha=$this->assertNumber($num);$color[4]=$alpha;return $color;}list($r,$g,$b,$a)=$args;return array('color',$r[1],$g[1],$b[1],$a[1]);} protected function alterColor($args,$fn){$color=$this->assertColor($args[0]);reset($args);foreach(array(1,2,3,7) as $i){if(isset($args[$i])){$val=$this->assertNumber($args[$i]);$ii=$i===7?4:$i;$color[$ii]=call_user_func($fn,isset($color[$ii])?$color[$ii]:0,$val,$i);}}if(isset($args[4])||isset($args[5])||isset($args[6])){$hsl=$this->toHSL($color[1],$color[2],$color[3]);foreach(array(4,5,6) as $i){if(isset($args[$i])){$val=$this->assertNumber($args[$i]);$hsl[$i-3]=call_user_func($fn,$hsl[$i-3],$val,$i);}}$rgb=$this->toRGB($hsl[1],$hsl[2],$hsl[3]);if(isset($color[4])){$rgb[4]=$color[4];}$color=$rgb;}return $color;} protected static $libAdjustColor=array('color','red','green','blue','hue','saturation','lightness','alpha'); protected function libAdjustColor($args){return $this->alterColor($args,function ($base,$alter,$i){return $base+$alter;});} protected static $libChangeColor=array('color','red','green','blue','hue','saturation','lightness','alpha'); protected function libChangeColor($args){return $this->alterColor($args,function ($base,$alter,$i){return $alter;});} protected static $libScaleColor=array('color','red','green','blue','hue','saturation','lightness','alpha'); protected function libScaleColor($args){return $this->alterColor($args,function ($base,$scale,$i){switch($i){case 1:case 2:case 3:$max=255;break;case 4:$max=360;break;case 7:$max=1;break;default:$max=100;}$scale=$scale/100;if($scale<0){return $base*$scale+$base;}return ($max-$base)*$scale+$base;});} protected static $libIeHexStr=array('color'); protected function libIeHexStr($args){$color=$this->coerceColor($args[0]);$color[4]=isset($color[4])?round(255*$color[4]):255;return sprintf('#%02X%02X%02X%02X',$color[4],$color[1],$color[2],$color[3]);} protected static $libRed=array('color'); protected function libRed($args){$color=$this->coerceColor($args[0]);return $color[1];} protected static $libGreen=array('color'); protected function libGreen($args){$color=$this->coerceColor($args[0]);return $color[2];} protected static $libBlue=array('color'); protected function libBlue($args){$color=$this->coerceColor($args[0]);return $color[3];} protected static $libAlpha=array('color'); protected function libAlpha($args){if($color=$this->coerceColor($args[0])){return isset($color[4])?$color[4]:1;}return null;} protected static $libOpacity=array('color'); protected function libOpacity($args){$value=$args[0];if($value[0]==='number'){return null;}return $this->libAlpha($args);} protected static $libMix=array('color-1','color-2','weight'); protected function libMix($args){list($first,$second,$weight)=$args;$first=$this->assertColor($first);$second=$this->assertColor($second);if(!isset($weight)){$weight=0.5;}else {$weight=$this->coercePercent($weight);}$firstAlpha=isset($first[4])?$first[4]:1;$secondAlpha=isset($second[4])?$second[4]:1;$w=$weight*2-1;$a=$firstAlpha-$secondAlpha;$w1=(($w*$a===-1?$w:($w+$a)/(1+$w*$a))+1)/2.0;$w2=1.0-$w1;$new=array('color',$w1*$first[1]+$w2*$second[1],$w1*$first[2]+$w2*$second[2],$w1*$first[3]+$w2*$second[3],);if($firstAlpha!=1.0||$secondAlpha!=1.0){$new[]=$firstAlpha*$weight+$secondAlpha*($weight-1);}return $this->fixColor($new);} protected static $libHsl=array('hue','saturation','lightness'); protected function libHsl($args){list($h,$s,$l)=$args;return $this->toRGB($h[1],$s[1],$l[1]);} protected static $libHsla=array('hue','saturation','lightness','alpha'); protected function libHsla($args){list($h,$s,$l,$a)=$args;$color=$this->toRGB($h[1],$s[1],$l[1]);$color[4]=$a[1];return $color;} protected static $libHue=array('color'); protected function libHue($args){$color=$this->assertColor($args[0]);$hsl=$this->toHSL($color[1],$color[2],$color[3]);return array('number',$hsl[1],'deg');} protected static $libSaturation=array('color'); protected function libSaturation($args){$color=$this->assertColor($args[0]);$hsl=$this->toHSL($color[1],$color[2],$color[3]);return array('number',$hsl[2],'%');} protected static $libLightness=array('color'); protected function libLightness($args){$color=$this->assertColor($args[0]);$hsl=$this->toHSL($color[1],$color[2],$color[3]);return array('number',$hsl[3],'%');} protected function adjustHsl($color,$idx,$amount){$hsl=$this->toHSL($color[1],$color[2],$color[3]);$hsl[$idx]+=$amount;$out=$this->toRGB($hsl[1],$hsl[2],$hsl[3]);if(isset($color[4])){$out[4]=$color[4];}return $out;} protected static $libAdjustHue=array('color','degrees'); protected function libAdjustHue($args){$color=$this->assertColor($args[0]);$degrees=$this->assertNumber($args[1]);return $this->adjustHsl($color,1,$degrees);} protected static $libLighten=array('color','amount'); protected function libLighten($args){$color=$this->assertColor($args[0]);$amount=Util::checkRange('amount',new Range(0,100),$args[1],'%');return $this->adjustHsl($color,3,$amount);} protected static $libDarken=array('color','amount'); protected function libDarken($args){$color=$this->assertColor($args[0]);$amount=Util::checkRange('amount',new Range(0,100),$args[1],'%');return $this->adjustHsl($color,3,-$amount);} protected static $libSaturate=array('color','amount'); protected function libSaturate($args){$value=$args[0];if($value[0]==='number'){return null;}$color=$this->assertColor($value);$amount=100*$this->coercePercent($args[1]);return $this->adjustHsl($color,2,$amount);} protected static $libDesaturate=array('color','amount'); protected function libDesaturate($args){$color=$this->assertColor($args[0]);$amount=100*$this->coercePercent($args[1]);return $this->adjustHsl($color,2,-$amount);} protected static $libGrayscale=array('color'); protected function libGrayscale($args){$value=$args[0];if($value[0]==='number'){return null;}return $this->adjustHsl($this->assertColor($value),2,-100);} protected static $libComplement=array('color'); protected function libComplement($args){return $this->adjustHsl($this->assertColor($args[0]),1,180);} protected static $libInvert=array('color'); protected function libInvert($args){$value=$args[0];if($value[0]==='number'){return null;}$color=$this->assertColor($value);$color[1]=255-$color[1];$color[2]=255-$color[2];$color[3]=255-$color[3];return $color;} protected static $libOpacify=array('color','amount'); protected function libOpacify($args){$color=$this->assertColor($args[0]);$amount=$this->coercePercent($args[1]);$color[4]=(isset($color[4])?$color[4]:1)+$amount;$color[4]=min(1,max(0,$color[4]));return $color;} protected static $libFadeIn=array('color','amount'); protected function libFadeIn($args){return $this->libOpacify($args);} protected static $libTransparentize=array('color','amount'); protected function libTransparentize($args){$color=$this->assertColor($args[0]);$amount=$this->coercePercent($args[1]);$color[4]=(isset($color[4])?$color[4]:1)-$amount;$color[4]=min(1,max(0,$color[4]));return $color;} protected static $libFadeOut=array('color','amount'); protected function libFadeOut($args){return $this->libTransparentize($args);} protected static $libUnquote=array('string'); protected function libUnquote($args){$str=$args[0];if($str[0]==='string'){$str[1]='';}return $str;} protected static $libQuote=array('string'); protected function libQuote($args){$value=$args[0];if($value[0]==='string'&&!empty($value[1])){return $value;}return array('string','"',array($value));} protected static $libPercentage=array('value'); protected function libPercentage($args){return array('number',$this->coercePercent($args[0])*100,'%');} protected static $libRound=array('value'); protected function libRound($args){$num=$args[0];$num[1]=round($num[1]);return $num;} protected static $libFloor=array('value'); protected function libFloor($args){$num=$args[0];$num[1]=floor($num[1]);return $num;} protected static $libCeil=array('value'); protected function libCeil($args){$num=$args[0];$num[1]=ceil($num[1]);return $num;} protected static $libAbs=array('value'); protected function libAbs($args){$num=$args[0];$num[1]=abs($num[1]);return $num;} protected function libMin($args){$numbers=$this->getNormalizedNumbers($args);$min=null;foreach($numbers as $key=>$number){if(null===$min||$number[1]<=$min[1]){$min=array($key,$number[1]);}}return $args[$min[0]];} protected function libMax($args){$numbers=$this->getNormalizedNumbers($args);$max=null;foreach($numbers as $key=>$number){if(null===$max||$number[1]>=$max[1]){$max=array($key,$number[1]);}}return $args[$max[0]];} protected function getNormalizedNumbers($args){$unit=null;$originalUnit=null;$numbers=array();foreach($args as $key=>$item){if('number'!==$item[0]){$this->throwError('%s is not a number',$item[0]);}$number=$this->normalizeNumber($item);if(null===$unit){$unit=$number[2];$originalUnit=$item[2];}elseif($unit!==$number[2]){$this->throwError('Incompatible units: "%s" and "%s".',$originalUnit,$item[2]);}$numbers[$key]=$number;}return $numbers;} protected static $libLength=array('list'); protected function libLength($args){$list=$this->coerceList($args[0]);return count($list[2]);} protected function libListSeparator($args){if(count($args)>1){return 'comma';}$list=$this->coerceList($args[0]);if(count($list[2])<=1){return 'space';}if($list[1]===','){return 'comma';}return 'space';} protected static $libNth=array('list','n'); protected function libNth($args){$list=$this->coerceList($args[0]);$n=$this->assertNumber($args[1]);if($n>0){$n--;}elseif($n<0){$n+=count($list[2]);}return isset($list[2][$n])?$list[2][$n]:self::$defaultValue;} protected static $libSetNth=array('list','n','value'); protected function libSetNth($args){$list=$this->coerceList($args[0]);$n=$this->assertNumber($args[1]);if($n>0){$n--;}elseif($n<0){$n+=count($list[2]);}if(!isset($list[2][$n])){$this->throwError('Invalid argument for "n"');}$list[2][$n]=$args[2];return $list;} protected static $libMapGet=array('map','key'); protected function libMapGet($args){$map=$this->assertMap($args[0]);$key=$this->compileStringContent($this->coerceString($args[1]));for($i=count($map[1])-1;$i>=0;$i--){if($key===$this->compileStringContent($this->coerceString($map[1][$i]))){return $map[2][$i];}}return self::$null;} protected static $libMapKeys=array('map'); protected function libMapKeys($args){$map=$this->assertMap($args[0]);$keys=$map[1];return array('list',',',$keys);} protected static $libMapValues=array('map'); protected function libMapValues($args){$map=$this->assertMap($args[0]);$values=$map[2];return array('list',',',$values);} protected static $libMapRemove=array('map','key'); protected function libMapRemove($args){$map=$this->assertMap($args[0]);$key=$this->compileStringContent($this->coerceString($args[1]));for($i=count($map[1])-1;$i>=0;$i--){if($key===$this->compileStringContent($this->coerceString($map[1][$i]))){array_splice($map[1],$i,1);array_splice($map[2],$i,1);}}return $map;} protected static $libMapHasKey=array('map','key'); protected function libMapHasKey($args){$map=$this->assertMap($args[0]);$key=$this->compileStringContent($this->coerceString($args[1]));for($i=count($map[1])-1;$i>=0;$i--){if($key===$this->compileStringContent($this->coerceString($map[1][$i]))){return true;}}return false;} protected static $libMapMerge=array('map-1','map-2'); protected function libMapMerge($args){$map1=$this->assertMap($args[0]);$map2=$this->assertMap($args[1]);return array('map',array_merge($map1[1],$map2[1]),array_merge($map1[2],$map2[2]));} protected function listSeparatorForJoin($list1,$sep){if(!isset($sep)){return $list1[1];}switch($this->compileValue($sep)){case 'comma':return ',';case 'space':return '';default:return $list1[1];}} protected static $libJoin=array('list1','list2','separator'); protected function libJoin($args){list($list1,$list2,$sep)=$args;$list1=$this->coerceList($list1,' ');$list2=$this->coerceList($list2,' ');$sep=$this->listSeparatorForJoin($list1,$sep);return array('list',$sep,array_merge($list1[2],$list2[2]));} protected static $libAppend=array('list','val','separator'); protected function libAppend($args){list($list1,$value,$sep)=$args;$list1=$this->coerceList($list1,' ');$sep=$this->listSeparatorForJoin($list1,$sep);return array('list',$sep,array_merge($list1[2],array($value)));} protected function libZip($args){foreach($args as $arg){$this->assertList($arg);}$lists=array();$firstList=array_shift($args);foreach($firstList[2] as $key=>$item){$list=array('list','',array($item));foreach($args as $arg){if(isset($arg[2][$key])){$list[2][]=$arg[2][$key];}else {break2;}}$lists[]=$list;}return array('list',',',$lists);} protected static $libTypeOf=array('value'); protected function libTypeOf($args){$value=$args[0];switch($value[0]){case 'keyword':if($value===self::$true||$value===self::$false){return 'bool';}if($this->coerceColor($value)){return 'color';}case 'function':return 'string';case 'list':if(isset($value[3])&&$value[3]){return 'arglist';}default:return $value[0];}} protected static $libUnit=array('number'); protected function libUnit($args){$num=$args[0];if($num[0]==='number'){return array('string','"',array($num[2]));}return '';} protected static $libUnitless=array('number'); protected function libUnitless($args){$value=$args[0];return $value[0]==='number'&&empty($value[2]);} protected static $libComparable=array('number-1','number-2'); protected function libComparable($args){list($number1,$number2)=$args;if(!isset($number1[0])||$number1[0]!=='number'||!isset($number2[0])||$number2[0]!=='number'){$this->throwError('Invalid argument(s) for "comparable"');}$number1=$this->normalizeNumber($number1);$number2=$this->normalizeNumber($number2);return $number1[2]===$number2[2]||$number1[2]===''||$number2[2]==='';} protected static $libStrIndex=array('string','substring'); protected function libStrIndex($args){$string=$this->coerceString($args[0]);$stringContent=$this->compileStringContent($string);$substring=$this->coerceString($args[1]);$substringContent=$this->compileStringContent($substring);$result=strpos($stringContent,$substringContent);return $result===false?self::$null:array('number',$result+1,'');} protected static $libStrInsert=array('string','insert','index'); protected function libStrInsert($args){$string=$this->coerceString($args[0]);$stringContent=$this->compileStringContent($string);$insert=$this->coerceString($args[1]);$insertContent=$this->compileStringContent($insert);list(,$index)=$args[2];$string[2]=array(substr_replace($stringContent,$insertContent,$index-1,0));return $string;} protected static $libStrLength=array('string'); protected function libStrLength($args){$string=$this->coerceString($args[0]);$stringContent=$this->compileStringContent($string);return array('number',strlen($stringContent),'');} protected static $libStrSlice=array('string','start-at','end-at'); protected function libStrSlice($args){if($args[2][1]==0){return self::$null;}$string=$this->coerceString($args[0]);$stringContent=$this->compileStringContent($string);$start=(int)$args[1][1]?:1;$end=(int)$args[2][1];$string[2]=array(substr($stringContent,$start-1,($end<0?$end:$end-$start)+1));return $string;} protected static $libToLowerCase=array('string'); protected function libToLowerCase($args){$string=$this->coerceString($args[0]);$stringContent=$this->compileStringContent($string);$string[2]=array(mb_strtolower($stringContent));return $string;} protected static $libToUpperCase=array('string'); protected function libToUpperCase($args){$string=$this->coerceString($args[0]);$stringContent=$this->compileStringContent($string);$string[2]=array(mb_strtoupper($stringContent));return $string;} protected static $libFeatureExists=array('feature'); protected function libFeatureExists($args){$string=$this->coerceString($args[0]);$name=$this->compileStringContent($string);return $this->toBool(array_key_exists($name,$this->registeredFeatures)?$this->registeredFeatures[$name]:false);} protected static $libFunctionExists=array('name'); protected function libFunctionExists($args){$string=$this->coerceString($args[0]);$name=$this->compileStringContent($string);if($this->has(self::$namespaces['function'].$name)){return true;}$name=$this->normalizeName($name);if(isset($this->userFunctions[$name])){return true;}$f=$this->getBuiltinFunction($name);return $this->toBool(is_callable($f));} protected static $libGlobalVariableExists=array('name'); protected function libGlobalVariableExists($args){$string=$this->coerceString($args[0]);$name=$this->compileStringContent($string);return $this->has($name,$this->rootEnv)?self::$true:self::$false;} protected static $libMixinExists=array('name'); protected function libMixinExists($args){$string=$this->coerceString($args[0]);$name=$this->compileStringContent($string);return $this->has(self::$namespaces['mixin'].$name)?self::$true:self::$false;} protected static $libVariableExists=array('name'); protected function libVariableExists($args){$string=$this->coerceString($args[0]);$name=$this->compileStringContent($string);return $this->has($name)?self::$true:self::$false;} protected function libCounter($args){$list=array_map(array($this,'compileValue'),$args);return array('string','',array('counter('.implode(',',$list).')'));} protected function libRandom($args){if(isset($args[0])){$n=$this->assertNumber($args[0]);if($n<1){$this->throwError("limit must be greater than or equal to 1");}return array('number',mt_rand(1,$n),'');}return array('number',mt_rand(1,mt_getrandmax()),'');} protected function libUniqueId(){static $id;if(!isset($id)){$id=mt_rand(0,pow(36,8));}$id+=mt_rand(0,10)+1;return array('string','',array('u'.str_pad(base_convert($id,10,36),8,'0',STR_PAD_LEFT)));}}


?><?php


namespace Leafo\ScssPhp;abstract class Formatter{ public $indentLevel; public $indentChar; public $break; public $open; public $close; public $tagSeparator; public $assignSeparator;abstract public function __construct(); protected function indentStr(){return '';} public function property($name,$value){return rtrim($name).$this->assignSeparator.$value.';';} public function stripSemicolon(&$lines){} protected function blockLines($block){$inner=$this->indentStr();$glue=$this->break.$inner;echo $inner.implode($glue,$block->lines);if(!empty($block->children)){echo $this->break;}} protected function blockSelectors($block){$inner=$this->indentStr();echo $inner.implode($this->tagSeparator,$block->selectors).$this->open.$this->break;} protected function blockChildren($block){foreach($block->children as $child){$this->block($child);}} protected function block($block){if(empty($block->lines)&&empty($block->children)){return;}$pre=$this->indentStr();if(!empty($block->selectors)){$this->blockSelectors($block);$this->indentLevel++;}if(!empty($block->lines)){$this->blockLines($block);}if(!empty($block->children)){$this->blockChildren($block);}if(!empty($block->selectors)){$this->indentLevel--;if(empty($block->children)){echo $this->break;}echo $pre.$this->close.$this->break;}} public function format($block){ob_start();$this->block($block);$out=ob_get_clean();return $out;}}


?><?php


namespace Leafo\ScssPhp\Formatter;use Leafo\ScssPhp\Formatter;class Crunched extends Formatter{ public function __construct(){$this->indentLevel=0;$this->indentChar='  ';$this->break='';$this->open='{';$this->close='}';$this->tagSeparator=',';$this->assignSeparator=':';} public function stripSemicolon(&$lines){if(($count=count($lines))&&substr($lines[$count-1],-1)===';'){$lines[$count-1]=substr($lines[$count-1],0,-1);}} public function blockLines($block){$inner=$this->indentStr();$glue=$this->break.$inner;foreach($block->lines as $index=>$line){if(substr($line,0,2)==='/*'){unset($block->lines[$index]);}}echo $inner.implode($glue,$block->lines);if(!empty($block->children)){echo $this->break;}}}


?><?php


namespace Leafo\ScssPhp\Formatter;use Leafo\ScssPhp\Formatter;class Expanded extends Formatter{ public function __construct(){$this->indentLevel=0;$this->indentChar='  ';$this->break="\n";$this->open=' {';$this->close='}';$this->tagSeparator=', ';$this->assignSeparator=': ';} protected function indentStr(){return str_repeat($this->indentChar,$this->indentLevel);} protected function blockLines($block){$inner=$this->indentStr();$glue=$this->break.$inner;foreach($block->lines as $index=>$line){if(substr($line,0,2)==='/*'){$block->lines[$index]=preg_replace('/(\r|\n)+/',$glue,$line);}}echo $inner.implode($glue,$block->lines);if(empty($block->selectors)||!empty($block->children)){echo $this->break;}}}


?><?php


namespace Leafo\ScssPhp;use Leafo\ScssPhp\Compiler;class Parser{const SOURCE_INDEX=-1;const SOURCE_POSITION=-2; protected static $precedence=array('='=>0,'or'=>1,'and'=>2,'=='=>3,'!='=>3,'<='=>4,'>='=>4,'<'=>4,'>'=>4,'+'=>5,'-'=>5,'*'=>6,'/'=>6,'%'=>6,); protected static $operators=array('+','-','*','/','%','==','!=','<=','>=','<','>','and','or',); protected static $operatorStr; protected static $whitePattern; protected static $commentMulti; protected static $commentSingle='//'; protected static $commentMultiLeft='/*'; protected static $commentMultiRight='*/'; private $sourceName; private $sourceIndex; private $charset; private $count; private $env; private $inParens; private $eatWhiteDefault; private $buffer; public function __construct($sourceName,$sourceIndex=0){$this->sourceName=$sourceName?:'(stdin)';$this->sourceIndex=$sourceIndex;$this->charset=null;if(empty(self::$operatorStr)){self::$operatorStr=$this->makeOperatorStr(self::$operators);$commentSingle=$this->pregQuote(self::$commentSingle);$commentMultiLeft=$this->pregQuote(self::$commentMultiLeft);$commentMultiRight=$this->pregQuote(self::$commentMultiRight);self::$commentMulti=$commentMultiLeft.'.*?'.$commentMultiRight;self::$whitePattern='/'.$commentSingle.'[^\n]*\s*|('.self::$commentMulti.')\s*|\s+/Ais';}} protected static function makeOperatorStr($operators){return '('.implode('|',array_map(array('Leafo\ScssPhp\Parser','pregQuote'),$operators)).')';} public function parse($buffer){$this->count=0;$this->env=null;$this->inParens=false;$this->eatWhiteDefault=true;$this->buffer=$buffer;$this->pushBlock(null);$this->whitespace();$this->pushBlock(null);$this->popBlock();while($this->parseChunk()){;}if($this->count!==strlen($this->buffer)){$this->throwParseError();}if(!empty($this->env->parent)){$this->throwParseError('unclosed block');}if($this->charset){array_unshift($this->env->children,$this->charset);}$this->env->isRoot=true;return $this->env;} public function parseValue($buffer,&$out){$this->count=0;$this->env=null;$this->inParens=false;$this->eatWhiteDefault=true;$this->buffer=(string)$buffer;return $this->valueList($out);} public function parseSelector($buffer,&$out){$this->count=0;$this->env=null;$this->inParens=false;$this->eatWhiteDefault=true;$this->buffer=(string)$buffer;return $this->selectors($out);} protected function parseChunk(){$s=$this->seek();if(isset($this->buffer[$this->count])&&$this->buffer[$this->count]==='@'){if($this->literal('@at-root')&&($this->selectors($selector)||true)&&($this->map($with)||true)&&$this->literal('{')){$atRoot=$this->pushSpecialBlock('at-root',$s);$atRoot->selector=$selector;$atRoot->with=$with;return true;}$this->seek($s);if($this->literal('@media')&&$this->mediaQueryList($mediaQueryList)&&$this->literal('{')){$media=$this->pushSpecialBlock('media',$s);$media->queryList=$mediaQueryList[2];return true;}$this->seek($s);if($this->literal('@mixin')&&$this->keyword($mixinName)&&($this->argumentDef($args)||true)&&$this->literal('{')){$mixin=$this->pushSpecialBlock('mixin',$s);$mixin->name=$mixinName;$mixin->args=$args;return true;}$this->seek($s);if($this->literal('@include')&&$this->keyword($mixinName)&&($this->literal('(')&&($this->argValues($argValues)||true)&&$this->literal(')')||true)&&($this->end()||$this->literal('{')&&$hasBlock=true)){$child=array('include',$mixinName,isset($argValues)?$argValues:null,null);if(!empty($hasBlock)){$include=$this->pushSpecialBlock('include',$s);$include->child=$child;}else {$this->append($child,$s);}return true;}$this->seek($s);if($this->literal('@import')&&$this->valueList($importPath)&&$this->end()){$this->append(array('import',$importPath),$s);return true;}$this->seek($s);if($this->literal('@import')&&$this->url($importPath)&&$this->end()){$this->append(array('import',$importPath),$s);return true;}$this->seek($s);if($this->literal('@extend')&&$this->selectors($selector)&&$this->end()){$this->append(array('extend',$selector),$s);return true;}$this->seek($s);if($this->literal('@function')&&$this->keyword($fnName)&&$this->argumentDef($args)&&$this->literal('{')){$func=$this->pushSpecialBlock('function',$s);$func->name=$fnName;$func->args=$args;return true;}$this->seek($s);if($this->literal('@return')&&$this->valueList($retVal)&&$this->end()){$this->append(array('return',$retVal),$s);return true;}$this->seek($s);if($this->literal('@each')&&$this->genericList($varNames,'variable',',',false)&&$this->literal('in')&&$this->valueList($list)&&$this->literal('{')){$each=$this->pushSpecialBlock('each',$s);foreach($varNames[2] as $varName){$each->vars[]=$varName[1];}$each->list=$list;return true;}$this->seek($s);if($this->literal('@while')&&$this->expression($cond)&&$this->literal('{')){$while=$this->pushSpecialBlock('while',$s);$while->cond=$cond;return true;}$this->seek($s);if($this->literal('@for')&&$this->variable($varName)&&$this->literal('from')&&$this->expression($start)&&($this->literal('through')||($forUntil=true&&$this->literal('to')))&&$this->expression($end)&&$this->literal('{')){$for=$this->pushSpecialBlock('for',$s);$for->var=$varName[1];$for->start=$start;$for->end=$end;$for->until=isset($forUntil);return true;}$this->seek($s);if($this->literal('@if')&&$this->valueList($cond)&&$this->literal('{')){$if=$this->pushSpecialBlock('if',$s);$if->cond=$cond;$if->cases=array();return true;}$this->seek($s);if($this->literal('@debug')&&$this->valueList($value)&&$this->end()){$this->append(array('debug',$value),$s);return true;}$this->seek($s);if($this->literal('@warn')&&$this->valueList($value)&&$this->end()){$this->append(array('warn',$value),$s);return true;}$this->seek($s);if($this->literal('@error')&&$this->valueList($value)&&$this->end()){$this->append(array('error',$value),$s);return true;}$this->seek($s);if($this->literal('@content')&&$this->end()){$this->append(array('mixin_content'),$s);return true;}$this->seek($s);$last=$this->last();if(isset($last)&&$last[0]==='if'){list(,$if)=$last;if($this->literal('@else')){if($this->literal('{')){$else=$this->pushSpecialBlock('else',$s);}elseif($this->literal('if')&&$this->valueList($cond)&&$this->literal('{')){$else=$this->pushSpecialBlock('elseif',$s);$else->cond=$cond;}if(isset($else)){$else->dontAppend=true;$if->cases[]=$else;return true;}}$this->seek($s);}if($this->literal('@charset')&&$this->valueList($charset)&&$this->end()){if(!isset($this->charset)){$statement=array('charset',$charset);$statement[self::SOURCE_POSITION]=$s;$statement[self::SOURCE_INDEX]=$this->sourceIndex;$this->charset=$statement;}return true;}$this->seek($s);if($this->literal('@',false)&&$this->keyword($dirName)&&($this->variable($dirValue)||$this->openString('{',$dirValue)||true)&&$this->literal('{')){$directive=$this->pushSpecialBlock('directive',$s);$directive->name=$dirName;if(isset($dirValue)){$directive->value=$dirValue;}return true;}$this->seek($s);return false;}if($this->keyword($name,false)&&$this->literal(': ')&&$this->valueList($value)&&$this->end()){$name=array('string','',array($name));$this->append(array('assign',$name,$value),$s);return true;}$this->seek($s);if($this->variable($name)&&$this->literal(':')&&$this->valueList($value)&&$this->end()){$assignmentFlag=$this->stripAssignmentFlag($value);$this->append(array('assign',$name,$value,$assignmentFlag),$s);return true;}$this->seek($s);if($this->literal('-->')){return true;}if($this->selectors($selectors)&&$this->literal('{')){$b=$this->pushBlock($selectors,$s);return true;}$this->seek($s);if($this->propertyName($name)&&$this->literal(':')){$foundSomething=false;if($this->valueList($value)){$this->append(array('assign',$name,$value),$s);$foundSomething=true;}if($this->literal('{')){$propBlock=$this->pushSpecialBlock('nestedprop',$s);$propBlock->prefix=$name;$foundSomething=true;}elseif($foundSomething){$foundSomething=$this->end();}if($foundSomething){return true;}}$this->seek($s);if($this->literal('}')){$block=$this->popBlock();if(isset($block->type)&&$block->type==='include'){$include=$block->child;unset($block->child);$include[3]=$block;$this->append($include,$s);}elseif(empty($block->dontAppend)){$type=isset($block->type)?$block->type:'block';$this->append(array($type,$block),$s);}return true;}if($this->literal(';')||$this->literal('<!--')){return true;}return false;} protected function stripAssignmentFlag(&$value){$token=&$value;for($token=&$value;$token[0]==='list'&&($s=count($token[2]));$token=&$lastNode){$lastNode=&$token[2][$s-1];if($lastNode[0]==='keyword'&&in_array($lastNode[1],array('!default','!global'))){array_pop($token[2]);$token=$this->flattenList($token);return $lastNode[1];}}return false;} protected function literal($what,$eatWhitespace=null){if(!isset($eatWhitespace)){$eatWhitespace=$this->eatWhiteDefault;}if(!isset($what[1])&&isset($this->buffer[$this->count])){if($this->buffer[$this->count]===$what){if(!$eatWhitespace){$this->count++;return true;}}else {return false;}}return $this->match($this->pregQuote($what),$m,$eatWhitespace);} protected function pushBlock($selectors,$pos=0){$b=new \stdClass;$b->parent=$this->env;$b->sourcePosition=$pos;$b->sourceIndex=$this->sourceIndex;$b->selectors=$selectors;$b->comments=array();if(!$this->env){$b->children=array();}elseif(empty($this->env->children)){$this->env->children=$this->env->comments;$b->children=array();$this->env->comments=array();}else {$b->children=$this->env->comments;$this->env->comments=array();}$this->env=$b;return $b;} protected function pushSpecialBlock($type,$pos){$block=$this->pushBlock(null,$pos);$block->type=$type;return $block;} protected function popBlock(){$block=$this->env;if(empty($block->parent)){$this->throwParseError('unexpected }');}$this->env=$block->parent;unset($block->parent);$comments=$block->comments;if(count($comments)){$this->env->comments=$comments;unset($block->comments);}return $block;} protected function appendComment($comment){$comment[1]=substr(preg_replace(array('/^\s+/m','/^(.)/m'),array('',' \1'),$comment[1]),1);$this->env->comments[]=$comment;} protected function append($statement,$pos=null){if($pos!==null){$statement[self::SOURCE_POSITION]=$pos;$statement[self::SOURCE_INDEX]=$this->sourceIndex;}$this->env->children[]=$statement;$comments=$this->env->comments;if(count($comments)){$this->env->children=array_merge($this->env->children,$comments);$this->env->comments=array();}} protected function last(){$i=count($this->env->children)-1;if(isset($this->env->children[$i])){return $this->env->children[$i];}} protected function mediaQueryList(&$out){return $this->genericList($out,'mediaQuery',',',false);} protected function mediaQuery(&$out){$s=$this->seek();$expressions=null;$parts=array();if(($this->literal('only')&&($only=true)||$this->literal('not')&&($not=true)||true)&&$this->mixedKeyword($mediaType)){$prop=array('mediaType');if(isset($only)){$prop[]=array('keyword','only');}if(isset($not)){$prop[]=array('keyword','not');}$media=array('list','',array());foreach((array)$mediaType as $type){if(is_array($type)){$media[2][]=$type;}else {$media[2][]=array('keyword',$type);}}$prop[]=$media;$parts[]=$prop;}if(empty($parts)||$this->literal('and')){$this->genericList($expressions,'mediaExpression','and',false);if(is_array($expressions)){$parts=array_merge($parts,$expressions[2]);}}$out=$parts;return true;} protected function mediaExpression(&$out){$s=$this->seek();$value=null;if($this->literal('(')&&$this->expression($feature)&&($this->literal(':')&&$this->expression($value)||true)&&$this->literal(')')){$out=array('mediaExp',$feature);if($value){$out[]=$value;}return true;}$this->seek($s);return false;} protected function argValues(&$out){if($this->genericList($list,'argValue',',',false)){$out=$list[2];return true;}return false;} protected function argValue(&$out){$s=$this->seek();$keyword=null;if(!$this->variable($keyword)||!$this->literal(':')){$this->seek($s);$keyword=null;}if($this->genericList($value,'expression')){$out=array($keyword,$value,false);$s=$this->seek();if($this->literal('...')){$out[2]=true;}else {$this->seek($s);}return true;}return false;} protected function valueList(&$out){return $this->genericList($out,'spaceList',',');} protected function spaceList(&$out){return $this->genericList($out,'expression');} protected function genericList(&$out,$parseItem,$delim='',$flatten=true){$s=$this->seek();$items=array();while($this->$parseItem($value)){$items[]=$value;if($delim){if(!$this->literal($delim)){break;}}}if(count($items)===0){$this->seek($s);return false;}if($flatten&&count($items)===1){$out=$items[0];}else {$out=array('list',$delim,$items);}return true;} protected function expression(&$out){$s=$this->seek();if($this->literal('(')){if($this->literal(')')){$out=array('list','',array());return true;}if($this->valueList($out)&&$this->literal(')')&&$out[0]==='list'){return true;}$this->seek($s);if($this->map($out)){return true;}$this->seek($s);}if($this->value($lhs)){$out=$this->expHelper($lhs,0);return true;}return false;} protected function expHelper($lhs,$minP){$opstr=self::$operatorStr;$ss=$this->seek();$whiteBefore=isset($this->buffer[$this->count-1])&&ctype_space($this->buffer[$this->count-1]);while($this->match($opstr,$m,false)&&self::$precedence[$m[1]]>=$minP){$whiteAfter=isset($this->buffer[$this->count])&&ctype_space($this->buffer[$this->count]);$varAfter=isset($this->buffer[$this->count])&&$this->buffer[$this->count]==='$';$this->whitespace();$op=$m[1];if($op==='-'&&$whiteBefore&&!$whiteAfter&&!$varAfter){break;}if(!$this->value($rhs)){break;}if($this->peek($opstr,$next)&&self::$precedence[$next[1]]>self::$precedence[$op]){$rhs=$this->expHelper($rhs,self::$precedence[$next[1]]);}$lhs=array('exp',$op,$lhs,$rhs,$this->inParens,$whiteBefore,$whiteAfter);$ss=$this->seek();$whiteBefore=isset($this->buffer[$this->count-1])&&ctype_space($this->buffer[$this->count-1]);}$this->seek($ss);return $lhs;} protected function value(&$out){$s=$this->seek();if($this->literal('not',false)&&$this->whitespace()&&$this->value($inner)){$out=array('unary','not',$inner,$this->inParens);return true;}$this->seek($s);if($this->literal('not',false)&&$this->parenValue($inner)){$out=array('unary','not',$inner,$this->inParens);return true;}$this->seek($s);if($this->literal('+')&&$this->value($inner)){$out=array('unary','+',$inner,$this->inParens);return true;}$this->seek($s);if($this->literal('-',false)&&($this->variable($inner)||$this->unit($inner)||$this->parenValue($inner))){$out=array('unary','-',$inner,$this->inParens);return true;}$this->seek($s);if($this->parenValue($out)||$this->interpolation($out)||$this->variable($out)||$this->color($out)||$this->unit($out)||$this->string($out)||$this->func($out)||$this->progid($out)){return true;}if($this->keyword($keyword)){if($keyword==='null'){$out=array('null');}else {$out=array('keyword',$keyword);}return true;}return false;} protected function parenValue(&$out){$s=$this->seek();$inParens=$this->inParens;if($this->literal('(')){if($this->literal(')')){$out=array('list','',array());return true;}$this->inParens=true;if($this->expression($exp)&&$this->literal(')')){$out=$exp;$this->inParens=$inParens;return true;}}$this->inParens=$inParens;$this->seek($s);return false;} protected function progid(&$out){$s=$this->seek();if($this->literal('progid:',false)&&$this->openString('(',$fn)&&$this->literal('(')){$this->openString(')',$args,'(');if($this->literal(')')){$out=array('string','',array('progid:',$fn,'(',$args,')'));return true;}}$this->seek($s);return false;} protected function func(&$func){$s=$this->seek();if($this->keyword($name,false)&&$this->literal('(')){if($name==='alpha'&&$this->argumentList($args)){$func=array('function',$name,array('string','',$args));return true;}if($name!=='expression'&&!preg_match('/^(-[a-z]+-)?calc$/',$name)){$ss=$this->seek();if($this->argValues($args)&&$this->literal(')')){$func=array('fncall',$name,$args);return true;}$this->seek($ss);}if(($this->openString(')',$str,'(')||true)&&$this->literal(')')){$args=array();if(!empty($str)){$args[]=array(null,array('string','',array($str)));}$func=array('fncall',$name,$args);return true;}}$this->seek($s);return false;} protected function argumentList(&$out){$s=$this->seek();$this->literal('(');$args=array();while($this->keyword($var)){$ss=$this->seek();if($this->literal('=')&&$this->expression($exp)){$args[]=array('string','',array($var.'='));$arg=$exp;}else {break;}$args[]=$arg;if(!$this->literal(',')){break;}$args[]=array('string','',array(', '));}if(!$this->literal(')')||!count($args)){$this->seek($s);return false;}$out=$args;return true;} protected function argumentDef(&$out){$s=$this->seek();$this->literal('(');$args=array();while($this->variable($var)){$arg=array($var[1],null,false);$ss=$this->seek();if($this->literal(':')&&$this->genericList($defaultVal,'expression')){$arg[1]=$defaultVal;}else {$this->seek($ss);}$ss=$this->seek();if($this->literal('...')){$sss=$this->seek();if(!$this->literal(')')){$this->throwParseError('... has to be after the final argument');}$arg[2]=true;$this->seek($sss);}else {$this->seek($ss);}$args[]=$arg;if(!$this->literal(',')){break;}}if(!$this->literal(')')){$this->seek($s);return false;}$out=$args;return true;} protected function map(&$out){$s=$this->seek();if(!$this->literal('(')){return false;}$keys=array();$values=array();while($this->genericList($key,'expression')&&$this->literal(':')&&$this->genericList($value,'expression')){$keys[]=$key;$values[]=$value;if(!$this->literal(',')){break;}}if(!count($keys)||!$this->literal(')')){$this->seek($s);return false;}$out=array('map',$keys,$values);return true;} protected function color(&$out){$color=array('color');if($this->match('(#([0-9a-f]{6})|#([0-9a-f]{3}))',$m)){if(isset($m[3])){$num=$m[3];$width=16;}else {$num=$m[2];$width=256;}$num=hexdec($num);foreach(array(3,2,1) as $i){$t=$num%$width;$num/=$width;$color[$i]=$t*(256/$width)+$t*floor(16/$width);}$out=$color;return true;}return false;} protected function unit(&$unit){if($this->match('([0-9]*(\.)?[0-9]+)([%a-zA-Z]+)?',$m)){$unit=array('number',$m[1],empty($m[3])?'':$m[3]);return true;}return false;} protected function string(&$out){$s=$this->seek();if($this->literal('"',false)){$delim='"';}elseif($this->literal('\'',false)){$delim='\'';}else {return false;}$content=array();$oldWhite=$this->eatWhiteDefault;$this->eatWhiteDefault=false;while($this->matchString($m,$delim)){$content[]=$m[1];if($m[2]==='#{'){$this->count-=strlen($m[2]);if($this->interpolation($inter,false)){$content[]=$inter;}else {$this->count+=strlen($m[2]);$content[]='#{';}}elseif($m[2]==='\\'){$content[]=$m[2];if($this->literal($delim,false)){$content[]=$delim;}}else {$this->count-=strlen($delim);break;}}$this->eatWhiteDefault=$oldWhite;if($this->literal($delim)){$out=array('string',$delim,$content);return true;}$this->seek($s);return false;} protected function mixedKeyword(&$out){$s=$this->seek();$parts=array();$oldWhite=$this->eatWhiteDefault;$this->eatWhiteDefault=false;for(;;){if($this->keyword($key)){$parts[]=$key;continue;}if($this->interpolation($inter)){$parts[]=$inter;continue;}break;}$this->eatWhiteDefault=$oldWhite;if(count($parts)===0){return false;}if($this->eatWhiteDefault){$this->whitespace();}$out=$parts;return true;} protected function openString($end,&$out,$nestingOpen=null){$oldWhite=$this->eatWhiteDefault;$this->eatWhiteDefault=false;$stop=array('\'','"','#{',$end);$stop=array_map(array($this,'pregQuote'),$stop);$stop[]=self::$commentMulti;$patt='(.*?)('.implode('|',$stop).')';$nestingLevel=0;$content=array();while($this->match($patt,$m,false)){if(isset($m[1])&&$m[1]!==''){$content[]=$m[1];if($nestingOpen){$nestingLevel+=substr_count($m[1],$nestingOpen);}}$tok=$m[2];$this->count-=strlen($tok);if($tok===$end&&!$nestingLevel--){break;}if(($tok==='\''||$tok==='"')&&$this->string($str)){$content[]=$str;continue;}if($tok==='#{'&&$this->interpolation($inter)){$content[]=$inter;continue;}$content[]=$tok;$this->count+=strlen($tok);}$this->eatWhiteDefault=$oldWhite;if(count($content)===0){return false;}if(is_string(end($content))){$content[count($content)-1]=rtrim(end($content));}$out=array('string','',$content);return true;} protected function interpolation(&$out,$lookWhite=true){$oldWhite=$this->eatWhiteDefault;$this->eatWhiteDefault=true;$s=$this->seek();if($this->literal('#{')&&$this->valueList($value)&&$this->literal('}',false)){if($lookWhite){$left=preg_match('/\s/',$this->buffer[$s-1])?' ':'';$right=preg_match('/\s/',$this->buffer[$this->count])?' ':'';}else {$left=$right=false;}$out=array('interpolate',$value,$left,$right);$this->eatWhiteDefault=$oldWhite;if($this->eatWhiteDefault){$this->whitespace();}return true;}$this->seek($s);$this->eatWhiteDefault=$oldWhite;return false;} protected function propertyName(&$out){$s=$this->seek();$parts=array();$oldWhite=$this->eatWhiteDefault;$this->eatWhiteDefault=false;for(;;){if($this->interpolation($inter)){$parts[]=$inter;}elseif($this->keyword($text)){$parts[]=$text;}elseif(count($parts)===0&&$this->match('[:.#]',$m,false)){$parts[]=$m[0];}else {break;}}$this->eatWhiteDefault=$oldWhite;if(count($parts)===0){return false;}if(preg_match(self::$whitePattern,$this->buffer,$m,null,$this->count)){if(!empty($m[0])){$parts[]=$m[0];$this->count+=strlen($m[0]);}}$this->whitespace();$out=array('string','',$parts);return true;} protected function selectors(&$out){$s=$this->seek();$selectors=array();while($this->selector($sel)){$selectors[]=$sel;if(!$this->literal(',')){break;}while($this->literal(',')){;}}if(count($selectors)===0){$this->seek($s);return false;}$out=$selectors;return true;} protected function selector(&$out){$selector=array();for(;;){if($this->match('[>+~]+',$m)){$selector[]=array($m[0]);}elseif($this->selectorSingle($part)){$selector[]=$part;$this->match('\s+',$m);}elseif($this->match('\/[^\/]+\/',$m)){$selector[]=array($m[0]);}else {break;}}if(count($selector)===0){return false;}$out=$selector;return true;} protected function selectorSingle(&$out){$oldWhite=$this->eatWhiteDefault;$this->eatWhiteDefault=false;$parts=array();if($this->literal('*',false)){$parts[]='*';}for(;;){if($this->match('\s*[{,]',$m)){$this->count--;break;}$s=$this->seek();if($this->literal('&',false)){$parts[]=Compiler::$selfSelector;continue;}if($this->literal('.',false)){$parts[]='.';continue;}if($this->literal('|',false)){$parts[]='|';continue;}if($this->match('\\\\\S',$m)){$parts[]=$m[0];continue;}if($this->unit($unit)){$parts[]=$unit;continue;}if($this->keyword($name)){$parts[]=$name;continue;}if($this->interpolation($inter)){$parts[]=$inter;continue;}if($this->literal('%',false)&&$this->placeholder($placeholder)){$parts[]='%';$parts[]=$placeholder;continue;}if($this->literal('#',false)){$parts[]='#';continue;}if($this->match('::?',$m)&&$this->mixedKeyword($nameParts)){$parts[]=$m[0];foreach($nameParts as $sub){$parts[]=$sub;}$ss=$this->seek();if($this->literal('(')&&($this->openString(')',$str,'(')||true)&&$this->literal(')')){$parts[]='(';if(!empty($str)){$parts[]=$str;}$parts[]=')';}else {$this->seek($ss);}continue;}$this->seek($s);if($this->literal('[',false)){$attrParts=array('[');for(;;){if($this->literal(']',false)){$this->count--;break;}if($this->match('\s+',$m)){$attrParts[]=' ';continue;}if($this->string($str)){$attrParts[]=$str;continue;}if($this->keyword($word)){$attrParts[]=$word;continue;}if($this->interpolation($inter,false)){$attrParts[]=$inter;continue;}if($this->match('[|-~\$\*\^=]+',$m)){$attrParts[]=$m[0];continue;}break;}if($this->literal(']',false)){$attrParts[]=']';foreach($attrParts as $part){$parts[]=$part;}continue;}$this->seek($s);}break;}$this->eatWhiteDefault=$oldWhite;if(count($parts)===0){return false;}$out=$parts;return true;} protected function variable(&$out){$s=$this->seek();if($this->literal('$',false)&&$this->keyword($name)){$out=array('var',$name);return true;}$this->seek($s);return false;} protected function keyword(&$word,$eatWhitespace=null){if($this->match('(([\w_\-\*!"\']|[\\\\].)([\w\-_"\']|[\\\\].)*)',$m,$eatWhitespace)){$word=$m[1];return true;}return false;} protected function placeholder(&$placeholder){if($this->match('([\w\-_]+|#[{][$][\w\-_]+[}])',$m)){$placeholder=$m[1];return true;}return false;} protected function url(&$out){if($this->match('(url\(\s*(["\']?)([^)]+)\2\s*\))',$m)){$out=array('string','',array('url('.$m[2].$m[3].$m[2].')'));return true;}return false;} protected function end(){if($this->literal(';')){return true;}if($this->count===strlen($this->buffer)||$this->buffer[$this->count]==='}'){return true;}return false;} protected function to($what,&$out,$until=false,$allowNewline=false){if(is_string($allowNewline)){$validChars=$allowNewline;}else {$validChars=$allowNewline?'.':"[^\n]";}if(!$this->match('('.$validChars.'*?)'.$this->pregQuote($what),$m,!$until)){return false;}if($until){$this->count-=strlen($what);}$out=$m[1];return true;} public function throwParseError($msg='parse error',$count=null){$count=!isset($count)?$this->count:$count;$line=$this->getLineNo($count);if(!empty($this->sourceName)){$loc="$this->sourceName on line $line";}else {$loc="line: $line";}if($this->peek("(.*?)(\n|$)",$m,$count)){ throw new \Exception("$msg: failed at `$m[1]` $loc");} throw new \Exception("$msg: $loc");} public function getSourceName(){return $this->sourceName;} public function getLineNo($pos){return 1+substr_count(substr($this->buffer,0,$pos),"\n");} protected function matchString(&$m,$delim){$token=null;$end=strlen($this->buffer);foreach(array('#{','\\',$delim) as $lookahead){$pos=strpos($this->buffer,$lookahead,$this->count);if($pos!==false&&$pos<$end){$end=$pos;$token=$lookahead;}}if(!isset($token)){return false;}$match=substr($this->buffer,$this->count,$end-$this->count);$m=array($match.$token,$match,$token);$this->count=$end+strlen($token);return true;} protected function match($regex,&$out,$eatWhitespace=null){if(!isset($eatWhitespace)){$eatWhitespace=$this->eatWhiteDefault;}$r='/'.$regex.'/Ais';if(preg_match($r,$this->buffer,$out,null,$this->count)){$this->count+=strlen($out[0]);if($eatWhitespace){$this->whitespace();}return true;}return false;} protected function whitespace(){$gotWhite=false;while(preg_match(self::$whitePattern,$this->buffer,$m,null,$this->count)){if(isset($m[1])&&empty($this->commentsSeen[$this->count])){$this->appendComment(array('comment',$m[1]));$this->commentsSeen[$this->count]=true;}$this->count+=strlen($m[0]);$gotWhite=true;}return $gotWhite;} protected function peek($regex,&$out,$from=null){if(!isset($from)){$from=$this->count;}$r='/'.$regex.'/Ais';$result=preg_match($r,$this->buffer,$out,null,$from);return $result;} protected function seek($where=null){if($where===null){return $this->count;}$this->count=$where;return true;} public static function pregQuote($what){return preg_quote($what,'/');} protected function show(){if($this->peek("(.*?)(\n|$)",$m,$this->count)){return $m[1];}return '';} protected function flattenList($value){if($value[0]==='list'&&count($value[2])===1){return $this->flattenList($value[2][0]);}return $value;}}


?><?php


namespace Leafo\ScssPhp;use Leafo\ScssPhp\Base\Range;class Util{ public static function checkRange($name,Range$range,$value,$unit=''){$val=$value[1];$grace=new Range(-0.00001,0.00001);if($range->includes($val)){return $val;}if($grace->includes($val-$range->first)){return $range->first;}if($grace->includes($val-$range->last)){return $range->last;} throw new \Exception("$name {$val} must be between {$range->first} and {$range->last}$unit");}}


?><?php


namespace Leafo\ScssPhp;class Version{const VERSION='v0.3.3';}


?>